{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "javascript/DisablePoweredBy",
              "name": "DisablePoweredBy",
              "shortDescription": {
                "text": "Information Exposure"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nSensitive data includes: personally identifiable information (PII) of employees, customers, users, or other third parties; financial information; code; intellectual property; or protected network information such as passwords. Exposure of sensitive information to an unauthorized actor occurs when any party who does not require this information for business purposes can remove this information from the secure network.\nConsequences of exposure can include holding it for ransom payment, identity theft, or access to other internal network resources-along with financial loss due to regulatory fines, court settlements, or cost to restore compromised systems. As most attackers aim to extract sensitive information, this CWE only describes exploits that take advantage of vulnerabilities related to how data is handled: the management, storage, transfer, or removal of sensitive information.\n\n### Best practices for prevention\n- Encrypt data at all times, whether in transit or at rest.\n- When transporting data, always use a secure protocol such as TLS.\n- Before collecting PII or financial information, consider whether there is a true business need for this information; similarly, before storing the data, ensure that there is an ongoing business need.\n- Classify all incoming data according to privacy and security guidelines to improve awareness of sensitive data.\n- Ensure that caching is disabled for all transactions involving sensitive information.\n- Store passwords with secure, salted hashing functions.\n- Apply a network-wide least-privilege policy so sensitive data is provided only to users with business need to know.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/opencollective/opencollective-frontend/commit/17c5c31da6975fd0c3e032d19f6d733af4c66036?diff=split#diff-bcb729747c92e72c12e4590f736a334041a572c429756da8af60b6ab89c6be79R8",
                    "lines": [
                      {
                        "line": "const helmet = require('helmet');",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "const cookieParser = require('cookie-parser');",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "const cloudflareIps = require('cloudflare-ip/ips.json');",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "const intl = require('./intl');",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "const logger = require('./logger');",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "const loggerMiddleware = require('./logger-middleware');",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "const routes = require('./routes');",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "const server = express();",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "server.set('trust proxy', ['loopback', 'linklocal', 'uniquelocal'].concat(cloudflareIps));",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "const env = process.env.NODE_ENV;",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "const dev = env === 'development';",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "const app = next({ dev, dir: path.dirname(__dirname) });",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "const port = process.env.PORT;",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.prepare().then(() => {",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "  server.use(loggerMiddleware.logger);",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  server.use(helmet());",
                        "lineNumber": 30,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/jkettmann/universal-react-relay-starter-kit/commit/dfab2940d6a0678ede545c341af3cb9c51d6b687?diff=split#diff-da96dcbe471b47bbc5ec4aee2520997e363c827e6249d1834d4fff6f8d0df6c8R3",
                    "lines": [
                      {
                        "line": "import helmet from 'helmet'",
                        "lineNumber": 2,
                        "lineChange": "added"
                      },
                      {
                        "line": "import cookieParser from 'cookie-parser'",
                        "lineNumber": 3,
                        "lineChange": "none"
                      },
                      {
                        "line": "import Aws from 'aws-sdk'",
                        "lineNumber": 4,
                        "lineChange": "none"
                      },
                      {
                        "line": "import S3Router from 'react-s3-uploader/s3router'",
                        "lineNumber": 5,
                        "lineChange": "none"
                      },
                      {
                        "line": "import debug from 'debug'",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "import dotenv from 'dotenv'",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "dotenv.config()",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "const log = debug('server')",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "const PORT = process.env.PORT_APP",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "const DEV = process.env.NODE_ENV === 'development'",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "let isBuilt = false",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "Aws.config.update({",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  accessKeyId: process.env.AWS_ACCESS_KEY_ID,",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "})",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "const app = express()",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(helmet())",
                        "lineNumber": 24,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/mozilla/send/commit/4e4dc5e168074f150399dbceff7ea2c617800ca9?diff=split#diff-2142bb87b5c843eadf1da04062c8832170784a072d7e940262166bc0e66d1f07R6",
                    "lines": [
                      {
                        "line": "const helmet = require('helmet');",
                        "lineNumber": 5,
                        "lineChange": "added"
                      },
                      {
                        "line": "const bytes = require('bytes');",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "const conf = require('./config.js');",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "const storage = require('./storage.js');",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "const notLocalHost = conf.notLocalHost;",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "const mozlog = require('./log.js');",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "const log = mozlog('portal.server');",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "const app = express();",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.engine('handlebars', exphbs({ defaultLayout: 'main' }));",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('view engine', 'handlebars');",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(helmet());",
                        "lineNumber": 21,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test without express",
                  "secure the api with helmet",
                  "Fix some security vulnerabilities, refactor the error constants a little"
                ],
                "precision": "very-high",
                "repoDatasetSize": 991,
                "cwe": [
                  "CWE-200"
                ]
              }
            },
            {
              "id": "javascript/UseCsurfForExpress",
              "name": "UseCsurfForExpress",
              "shortDescription": {
                "text": "Cross-Site Request Forgery (CSRF)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\n### Best practices for prevention\n* Use development frameworks that defend against CSRF, using a nonce, hash, or some other security device to the URL and/or to forms.\n* Implement secure, unique, hidden tokens that are checked by the server each time to validate state-change requests.\n* Never assume that authentication tokens and session identifiers mean a request is legitimate.\n* Understand and implement other safe-cookie techniques, such as double submit cookies.\n* Terminate user sessions when not in use, including automatic timeout.\n* Ensure rigorous coding practices and defenses against other commonly exploited CWEs, since cross-site scripting (XSS), for example, can be used to bypass defenses against CSRF.\n\n## References\n\n* [Express Documentation - Implement CSRF Protection](https://expressjs.com/en/resources/middleware/csurf.html)\n* [Node Security Checklist - CSRF](https://blog.risingstack.com/node-js-security-checklist/#csrf)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/LukeLin/react-ocean/commit/9a13d57dedf6742ed06321a80ca2a5842fb8a72a?diff=split#diff-65890f102baa526da3cc5d65e0528ea728fa9fa63659a7f2e1d523686240359cR7",
                    "lines": [
                      {
                        "line": "import session from 'express-session';",
                        "lineNumber": 6,
                        "lineChange": "added"
                      },
                      {
                        "line": "import csurf from 'csurf';",
                        "lineNumber": 7,
                        "lineChange": "added"
                      },
                      {
                        "line": "import config from './config/config.json';",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "import routes from './routes';",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "import allowCrossDomain from './config/allowCrossDomain'",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "import { renderFile } from 'ejs';",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "let app = express();",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "if(process.env.NODE_ENV !== 'production'){",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    let webpack = require('webpack');",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    let config = require('../create-webpack.config')(true);",
                        "lineNumber": 15,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    let webpackDevMiddleware = require('webpack-dev-middleware');",
                        "lineNumber": 16,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    let webpackHotMiddleware = require('webpack-hot-middleware');",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    let compiler = webpack(config);",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    app.use(webpackDevMiddleware(compiler, { noInfo: true, publicPath: config.output.publicPath }));",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    app.use(webpackHotMiddleware(compiler));",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "}",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.set('host', process.env.IP || '127.0.0.1');",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.set('port', process.env.PORT || 36000);",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.disable('x-powered-by');",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.set('view engine', 'ejs');",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('views', __dirname + '/views');",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.engine('html', renderFile);",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(compress());",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(logger('dev'));",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(bodyParser.json());",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(bodyParser.urlencoded({ extended: true }));",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(cookieParser());",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(session({",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "    resave: true,",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "    saveUninitialized: true,",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "    secret: \"notagoodsecret\",",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "    cookie: {httpOnly: true}",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "}));",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "// app.use(favicon(__dirname + '/../public/favicon.ico'));",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use('/static', express.static(__dirname + '/../public', {",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "    maxAge: 86400000",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "}));",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "process.on('uncaughtException', err => {",
                        "lineNumber": 38,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    console.error(err.message + '\\n' + err.stack);",
                        "lineNumber": 39,
                        "lineChange": "removed"
                      },
                      {
                        "line": "});",
                        "lineNumber": 40,
                        "lineChange": "removed"
                      },
                      {
                        "line": "process.on('unhandledRejection', (reason, p) => {",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    console.error(\"Unhandled Rejection at: Promise \", p, \" reason: \", reason);",
                        "lineNumber": 42,
                        "lineChange": "removed"
                      },
                      {
                        "line": "});",
                        "lineNumber": 43,
                        "lineChange": "removed"
                      },
                      {
                        "line": "process.on('rejectionHandled', (reason, p) => {",
                        "lineNumber": 44,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    console.warn(\"rejectionHandled at: Promise \", p, \" reason: \", reason);",
                        "lineNumber": 45,
                        "lineChange": "removed"
                      },
                      {
                        "line": "});",
                        "lineNumber": 46,
                        "lineChange": "removed"
                      },
                      {
                        "line": "if(process.env.NODE_ENV !== 'production'){",
                        "lineNumber": 39,
                        "lineChange": "added"
                      },
                      {
                        "line": "    let webpack = require('webpack');",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "    let config = require('../create-webpack.config')(true);",
                        "lineNumber": 41,
                        "lineChange": "added"
                      },
                      {
                        "line": "    let webpackDevMiddleware = require('webpack-dev-middleware');",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "    let webpackHotMiddleware = require('webpack-hot-middleware');",
                        "lineNumber": 43,
                        "lineChange": "added"
                      },
                      {
                        "line": "    let compiler = webpack(config);",
                        "lineNumber": 44,
                        "lineChange": "added"
                      },
                      {
                        "line": "    app.use(webpackDevMiddleware(compiler, { noInfo: true, publicPath: config.output.publicPath }));",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "    app.use(webpackHotMiddleware(compiler));",
                        "lineNumber": 46,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 47,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.use('/', allowCrossDomain);",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(csurf());",
                        "lineNumber": 51,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.use(function (req, res, next) {",
                        "lineNumber": 52,
                        "lineChange": "added"
                      },
                      {
                        "line": "    res.locals.csrftoken = req.session._csrf;",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "    next();",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "});",
                        "lineNumber": 55,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/OpenSprites/OpenSprites-next/commit/0ff4f1bc633496f7d5abc5f9bdf2a5cce43b080e?diff=split#diff-d3f9f1ac91aa1bf0f85894eb43eb424f26c61fd0e44eeb8c0787f48a0ba511ecR36",
                    "lines": [
                      {
                        "line": "const csrf = require('csurf')",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "const session = require('express-session')",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "const sessionStore = require('session-file-store')(session)",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "const exprhbs = require('express-handlebars')",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "const cheerio = require('cheerio')",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "const request = require('request-promise')",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "const marked = require('marked')",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "const base32 = require('base32')",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "const uniqid = require('uniqid').process",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "const shortid = require('shortid').generate",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "const rot = require('rot')",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "const bcrypt = require('bcrypt-as-promised')",
                        "lineNumber": 48,
                        "lineChange": "added"
                      },
                      {
                        "line": "const tada = '🎉'",
                        "lineNumber": 50,
                        "lineChange": "added"
                      },
                      {
                        "line": "const db = require('../db')",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "/////////////////////////////////////////////////////",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "const badWords = '\\\\o(shtyl|(\\\\j*?)shpx(\\\\j*?)|s(h|i|\\\\*)?p?x(vat?)?|(\\\\j*?)fu(v|1|y)g(\\\\j*?)|pe(n|@|\\\\*)c(cre|crq|l)?|(onq|qhzo|wnpx)?(n|@)ff(u(b|0)yr|jvcr)?|(onq|qhzo|wnpx)?(n|@)efr(u(b|0)yr|jvcr)?|onfgneq|o(v|1|y|\\\\*)?g?pu(r?f)?|phag|phz|(tbq?)?qnz(a|z)(vg)?|qbhpur(\\\\j*?)|(arj)?snt(tbg|tng)?|sevt(tra|tva|tvat)?|bzst|cvff(\\\\j*?)|cbea|encr|ergneq|frk|f r k|fung|fyhg|gvg|ju(b|0)er(\\\\j*?)|jg(s|su|u))(f|rq)?\\\\o' // rot13",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "const signupProjectId = 115307769 // null to disable check",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "const requireEmailConfirmedToShare = false",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "/////////////////////////////////////////////////////////",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "const badWordsRegex = new RegExp(rot(badWords, -13), 'gi')",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "const hasBadWords = text => text.match(badWordsRegex)",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "const replaceBadWords = (text, w='⋆⋆⋆⋆') => text.replace(badWordsRegex, w)",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "/////////////////////////////////////////////////////////",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "let app = express()",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.engine('hbs', exprhbs.create({",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "  defaultLayout: 'main',",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "  extname: '.hbs',",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "  layoutsDir: 'public/views/layouts/',",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "  partialsDir: 'public/views/partials/',",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "  helpers: {",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "    md: raw => marked(raw, { sanitize: true }),",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "    json: raw => JSON.stringify(raw),",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "    timeago: raw => `<span class='timeago'>${raw}</span>`",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "}).engine)",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('views', 'public/views')",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('view engine', 'hbs')",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('trust proxy', 1)",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('json spaces', 2)",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(session({",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "  secret: 'thisandagainplsexplain',",
                        "lineNumber": 86,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  secret: process.env.session_secret,",
                        "lineNumber": 89,
                        "lineChange": "added"
                      },
                      {
                        "line": "  cookie: { secure: false }, // enable if running on HTTPS",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "  resave: true,",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "  saveUninitialized: true,",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "  store: new sessionStore({",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "    path: 'db/session',",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "    logFn: ()=>{}",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "  })",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "}))",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "const upload = multer({",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "  storage: multer.diskStorage({",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "    destination: (req, file, cb) => cb(null, path.join(__dirname, '../../', 'db/resource')),",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    filename: (req, file, cb) => {",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "      if(!req.session.user) cb(null, false)",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "      let filename = base32.encode(",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "        shortid()",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "      )",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "      cb(null, filename)",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "  })",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "})",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(bodyParser.json())",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(bodyParser.urlencoded({ extended: true }))",
                        "lineNumber": 112,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.use(function(req, res, next) {",
                        "lineNumber": 114,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  req.session.udata = db.user.get(req.session.user || '')",
                        "lineNumber": 115,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if(req.session.user && !db.user.exists(req.session.user)) {",
                        "lineNumber": 117,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    delete req.session.user",
                        "lineNumber": 118,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 119,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  next()",
                        "lineNumber": 121,
                        "lineChange": "removed"
                      },
                      {
                        "line": "})",
                        "lineNumber": 122,
                        "lineChange": "removed"
                      },
                      {
                        "line": "app.use(bodyParser.urlencoded({ extended: false }))",
                        "lineNumber": 115,
                        "lineChange": "added"
                      },
                      {
                        "line": "function mustSignIn(req, res, next) {",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if(req.session.user) {",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "    next()",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "  } else {",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "    req.session.r = req.originalUrl",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "    res.redirect('/signin')",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(csrf({",
                        "lineNumber": 126,
                        "lineChange": "added"
                      },
                      {
                        "line": "  value: req => req.body.csrf",
                        "lineNumber": 127,
                        "lineChange": "added"
                      },
                      {
                        "line": "}))",
                        "lineNumber": 128,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.use(function(err, req, res, next) {",
                        "lineNumber": 130,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if(err.code !== 'EBADCSRFTOKEN') return next(err)",
                        "lineNumber": 131,
                        "lineChange": "added"
                      },
                      {
                        "line": "  res.status(403).render('403', {",
                        "lineNumber": 133,
                        "lineChange": "added"
                      },
                      {
                        "line": "    user: req.session.user",
                        "lineNumber": 134,
                        "lineChange": "added"
                      },
                      {
                        "line": "  })",
                        "lineNumber": 135,
                        "lineChange": "added"
                      },
                      {
                        "line": "})",
                        "lineNumber": 136,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/pietrzakadrian/bank/commit/c37779b4b85c031001c5d84aa259adface1d6602?diff=split#diff-bcb729747c92e72c12e4590f736a334041a572c429756da8af60b6ab89c6be79L18",
                    "lines": [
                      {
                        "line": "const app = express();",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "const server = require('http').Server(app, {",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  transports: ['websocket', 'polling'],",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "const io = require('socket.io')(server, { pingTimeout: 60000 });",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "const cron = require('node-cron');",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "const swaggerUi = require('swagger-ui-express');",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "const swaggerDocument = require('./utils/swagger.json');",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "const db = require('./config/db.config');",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "const env = require('./config/env.config');",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "const Op = db.Sequelize.Op;",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "const cookieParser = require('cookie-parser');",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "const csrf = require('csurf');",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.use(bodyParser.urlencoded({ extended: true }));",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(bodyParser.json());",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  bodyParser.json({",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "    limit: '2000kb',",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }),",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": ");",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.disable('x-powered-by');",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(cors());",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(cookieParser());",
                        "lineNumber": 40,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.use((req, res, next) => {",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "  res.header('Access-Control-Allow-Origin', '*');",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "  res.header(",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'Access-Control-Allow-Headers',",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "    'Origin, X-Requested-With, Content-Type, Accept, Authorization',",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  );",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "  if (req.method === 'OPTIONS') {",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "    res.header('Access-Control-Allow-Methods', 'PUT, POST, PATCH, DELETE, GET');",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "    return res.status(200).json({});",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  next();",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(morgan('dev'));",
                        "lineNumber": 57,
                        "lineChange": "added"
                      },
                      {
                        "line": "require('./routes/currency.route.js')(app);",
                        "lineNumber": 59,
                        "lineChange": "added"
                      },
                      {
                        "line": "app.use(csrf({ cookie: true }));",
                        "lineNumber": 60,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Test without express",
                  "/server tests ()",
                  "Refactor error middleware for testing and extension"
                ],
                "precision": "very-high",
                "repoDatasetSize": 701,
                "cwe": [
                  "CWE-352"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "javascript/DisablePoweredBy",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Disable X-Powered-By header for your Express app (consider using Helmet middleware), because it exposes information about the used framework to potential attackers.",
            "markdown": "Disable X-Powered-By header for your {0} (consider using Helmet middleware), because it exposes information about the used framework to potential attackers.",
            "arguments": [
              "[Express app](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 28,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "011191e58638f4455ddf816a66ab7b1a9075913c3d6dd8973d00f8b1739474f4",
            "1": "07aef90f.4773f344.607187b5.d7919eeb.a1fb1152.8020cfdf.62588332.08f293cc.630e4ed1.4773f344.7d7e4934.6fbe71ba.f30fb760.49b28873.60d372c8.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 28,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 600,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/UseCsurfForExpress",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "CSRF protection is disabled for your Express app. This allows the attackers to execute requests on a user's behalf.",
            "markdown": "CSRF protection is disabled for your {0}. This allows the attackers to execute requests on a user's behalf.",
            "arguments": [
              "[Express app](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "server.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 28,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7449bc2333ccf71f37295d02fce184cf70b7c8ea8dfc29efcde11ebdb1dd7440",
            "1": "07aef90f.4773f344.607187b5.d7919eeb.a1fb1152.8020cfdf.62588332.08f293cc.630e4ed1.4773f344.7d7e4934.6fbe71ba.f30fb760.49b28873.60d372c8.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "server.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 28,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 600,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 5,
            "isSupported": true,
            "lang": "JavaScript"
          },
          {
            "files": 1,
            "isSupported": true,
            "lang": "HTML"
          },
          {
            "files": 1,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 3,
            "isSupported": true,
            "lang": "Java"
          }
        ]
      }
    }
  ]
}
